---
- name: "Install dependency"
  package:
    name:
      - util-linux
      - libseccomp
      - libseccomp-devel
      - "{{ 'container-selinux' if security.selinux == true else omit }}"
    state: present
  when:
    - ansible_os_family in ['RedHat', 'AlmaLinux', 'Rocky', 'TencentOS']
  tags: containerd_app

- name: "Install dependency"
  package:
    name:
      - util-linux
      - libseccomp2
    state: present
  when:
    - ansible_os_family in ["Debian"]
  tags: containerd_app

- name: "Add nvidia-container-toolkit repository"
  yum_repository:
    name: "{{ item.name }}"
    description: "{{ item.description}}"
    file: nvidia-container-toolkit
    baseurl: "{{ item.baseurl }}"
    repo_gpgcheck: no
    gpgcheck: no
    sslverify: yes
    sslcacert: "/etc/pki/tls/certs/ca-bundle.crt"
    enabled: yes
  with_items:
    - { name: "nvidia-container-toolkit",description: "nvidia-container-toolkit",baseurl: "{{ repo.nvidia_container_toolkit_centos }}" }
  when:
    - gpu is defined and gpu == 'true'
    - ansible_os_family in ['RedHat', 'AlmaLinux', 'Rocky', 'TencentOS']
  tags: gpu_runtime

- name: "Add nvidia-container-toolkit repository"
  apt_repository:
    repo: "{{ repo.nvidia_container_toolkit_ubuntu }}"
    filename: nvidia-container-toolkit
    state: present
  when:
    - gpu is defined and gpu == 'true'
    - ansible_os_family in ["Debian"]
  tags: gpu_runtime

- name: "Install nvidia-container-runtime"
  package:
    name: 
      - nvidia-container-runtime
      - nvidia-container-toolkit
    state: present
  when: gpu is defined and gpu == 'true'
  tags: gpu_app

- name: Install runc
  copy:
    src: "{{ download.dest }}/runc/{{ runc.version }}/{%- if ansible_architecture == 'x86_64' -%}amd64{%- else -%}arm64{%- endif -%}/runc.{%- if ansible_architecture == 'x86_64' -%}amd64{%- else -%}arm64{%- endif -%}"
    dest: "/usr/local/sbin/runc"
    owner: root
    group: root
    mode: 0755
  tags: install_runc

- name: Create cni directory
  file:
    path: "/opt/cni/bin"
    owner: root
    group: root
    mode: 0755
    state: directory
  tags: cni_config

- name: Install cni
  unarchive:
    src: "{{ download.dest }}/cniplugins/{{ cniplugins.version }}/{%- if ansible_architecture == 'x86_64' -%}amd64{%- else -%}arm64{%- endif -%}/cni-plugins-linux-{%- if ansible_architecture == 'x86_64' -%}amd64{%- else -%}arm64{%- endif -%}-{{ cniplugins.version }}.tgz"
    dest: "/opt/cni/bin/"
    remote_src: no
  tags: install_cni

- name: Install containerd
  unarchive:
    src: "{{ download.dest }}/containerd/v{{ containerd.version }}/{%- if ansible_architecture == 'x86_64' -%}amd64{%- else -%}arm64{%- endif -%}/containerd-{{ containerd.version }}-linux-{%- if ansible_architecture == 'x86_64' -%}amd64{%- else -%}arm64{%- endif -%}.tar.gz"
    dest: "/usr/local/bin/"
    remote_src: no
    extra_opts:
      - --strip-components=1
  tags: install_containerd
  notify:
    - restart containerd

- name: "Set containerd service"
  template:
    src: "containerd.service.j2"
    dest: "/usr/lib/systemd/system/containerd.service"
    owner: root
    group: root
    mode: 0644
  tags: containerd_config

- name: "Create containerd data directory"
  file:
    path: "{{ containerd.root }}"
    owner: root
    group: root
    mode: 0755
    state: directory
  tags: containerd_config

- name: "Create containerd config directory"
  file:
    path: "{{ containerd.cfg_dir }}"
    owner: root
    group: root
    mode: 0755
    state: directory
  tags: containerd_config

- name: "Set containerd config"
  template:
    src: "{{ 'config-v2.toml.j2' if containerd.version is version('2.0.0', '>=') else 'config-v1.toml.j2' }}"
    dest: "{{ containerd.cfg_dir }}/config.toml"
    owner: root
    group: root
    mode: "0640"
  tags: containerd_config
  notify:
    - restart containerd

- name: Configure containerd registries
  block:
    - name: Create registry directories
      file:
        path: "{{ containerd.cfg_dir }}/certs.d/{{ item.prefix }}"
        state: directory
        mode: "0755"
      loop: "{{ containerd.registry_mirrors }}"
    - name: Write hosts.toml file
      template:
        src: hosts.toml.j2
        dest: "{{ containerd.cfg_dir }}/certs.d/{{ item.prefix }}/hosts.toml"
        mode: "0640"
      loop: "{{ containerd.registry_mirrors }}"
  tags: containerd_config
  notify:
    - restart containerd

- name: Install cri-tools
  unarchive:
    src: "{{ download.dest }}/critools/{{ critools.version }}/{%- if ansible_architecture == 'x86_64' -%}amd64{%- else -%}arm64{%- endif -%}/crictl-{{ critools.version }}-linux-{%- if ansible_architecture == 'x86_64' -%}amd64{%- else -%}arm64{%- endif -%}.tar.gz"
    dest: "/usr/local/bin/"
    remote_src: no
  tags: install_critools
  notify:
    - Get crictl completion
    - Install crictl completion

- name: "Config cri-tools"
  template:
    src: "crictl.yaml.j2"
    dest: "/etc/crictl.yaml"
    owner: root
    group: root
    mode: 0644
  tags: cri_tools
  