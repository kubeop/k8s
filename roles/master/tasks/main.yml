---
- name: "Create kubernetes user group"
  group:
    name: kube
    gid: 200
    system: true
  tags: create_kube_group

- name: Create kubernetes user
  user:
    name: kube
    uid: 200
    group: kube
    comment: "Kubernetes User"
    create_home: false
    shell: /sbin/nologin
    system: true
  tags: create_kube_user

- name: "Create kubernetes config directory"
  file:
    path: "{{ item }}"
    owner: root
    group: root
    mode: 0755
    state: directory
  with_items:
    - "~/.kube"
    - "/etc/kubernetes/pki"
  tags: dir

- name: "Create kubernetes log directory"
  file:
    path: "{{ item }}"
    owner: kube
    group: kube
    mode: 0755
    state: directory
  with_items:
    - "/var/log/kubernetes"
    - "/usr/libexec/kubernetes"
  tags: dir

- name: "Install kubectl"
  copy:
    src: "{{ download.dest }}/kubernetes/{{ kubernetes.version }}/{%- if ansible_architecture == 'x86_64' -%}amd64{%- else -%}arm64{%- endif -%}/kubectl"
    dest: "/usr/bin/"
    owner: root
    group: root
    mode: 0755
  tags: install_kubectl

- name: "Install master"
  copy:
    src: "{{ download.dest }}/kubernetes/{{ kubernetes.version }}/{%- if ansible_architecture == 'x86_64' -%}amd64{%- else -%}arm64{%- endif -%}/{{ item }}"
    dest: "/usr/bin/"
    owner: root
    group: root
    mode: 0755
  with_items:
    - kube-apiserver
    - kube-controller-manager
    - kube-scheduler
  tags: install_master

- name: "Distribution master certs"
  copy:
    src: "{{ item }}"
    dest: "/etc/kubernetes/pki/"
    owner: root
    group: root
    mode: 0644
  with_items:
    - "{{ cert.dir }}/ca.key"
    - "{{ cert.dir }}/ca.pem"
    - "{{ cert.dir }}/sa.key"
    - "{{ cert.dir }}/sa.pub"
    - "{{ cert.dir }}/etcd-ca.pem"
    - "{{ cert.dir }}/{{ ansible_hostname.split('-')[-2:] | join('-') | lower }}/apiserver.key"
    - "{{ cert.dir }}/{{ ansible_hostname.split('-')[-2:] | join('-') | lower }}/apiserver.pem"
    - "{{ cert.dir }}/{{ ansible_hostname.split('-')[-2:] | join('-') | lower }}/apiserver-etcd-client.key"
    - "{{ cert.dir }}/{{ ansible_hostname.split('-')[-2:] | join('-') | lower }}/apiserver-etcd-client.pem"
    - "{{ cert.dir }}/{{ ansible_hostname.split('-')[-2:] | join('-') | lower }}/apiserver-kubelet-client.key"
    - "{{ cert.dir }}/{{ ansible_hostname.split('-')[-2:] | join('-') | lower }}/apiserver-kubelet-client.pem"
    - "{{ cert.dir }}/front-proxy-ca.key"
    - "{{ cert.dir }}/front-proxy-ca.pem"
    - "{{ cert.dir }}/{{ ansible_hostname.split('-')[-2:] | join('-') | lower }}/front-proxy-client.key"
    - "{{ cert.dir }}/{{ ansible_hostname.split('-')[-2:] | join('-') | lower }}/front-proxy-client.pem"
    - "{{ cert.dir }}/{{ ansible_hostname.split('-')[-2:] | join('-') | lower }}/controller-manager.key"
    - "{{ cert.dir }}/{{ ansible_hostname.split('-')[-2:] | join('-') | lower }}/controller-manager.pem"
    - "{{ cert.dir }}/{{ ansible_hostname.split('-')[-2:] | join('-') | lower }}/scheduler.key"
    - "{{ cert.dir }}/{{ ansible_hostname.split('-')[-2:] | join('-') | lower }}/scheduler.pem"
    - "{{ cert.dir }}/{{ ansible_hostname.split('-')[-2:] | join('-') | lower }}/admin.key"
    - "{{ cert.dir }}/{{ ansible_hostname.split('-')[-2:] | join('-') | lower }}/admin.pem"
  tags:
    - dis_master_certs
    - dis_certs

- name: "Get token-id"
  shell: "cat {{ cert.dir }}/token | grep -v '^#' | awk -F '.' '{print $1}'"
  register: token_id
  connection: local
  tags:
    - dis_kubectl_kubeconfig
    - dis_master_kubeconfig

- name: "Distribution kubectl kubeconfig"
  template:
    src: "admin.kubeconfig.j2"
    mode: 0600
    dest: "~/.kube/config"
  tags:
    - dis_kubectl_kubeconfig
    - dis_master_kubeconfig

- name: "Distribution master kubeconfig"
  template:
    src: "{{ item.src }}"
    owner: root
    group: root
    mode: 0644
    dest: "{{ item.dest }}"
  with_items:
    - {src: "controller-manager.kubeconfig.j2",dest: "/etc/kubernetes/controller-manager.kubeconfig" }
    - {src: "scheduler.kubeconfig.j2",dest: "/etc/kubernetes/scheduler.kubeconfig" }
  tags: dis_master_kubeconfig

- name: "Distribution master config"
  template:
    src: "{{ item.src }}"
    owner: root
    group: root
    mode: 0644
    dest: "{{ item.dest }}"
  with_items:
    - {src: "kube-apiserver.conf.j2",dest: "/etc/kubernetes/kube-apiserver.conf" }
    - {src: "kube-controller-manager.conf.j2",dest: "/etc/kubernetes/kube-controller-manager.conf" }
    - {src: "kube-scheduler.conf.j2",dest: "/etc/kubernetes/kube-scheduler.conf" }
    - {src: "audit-policy.yaml.j2",dest: "/etc/kubernetes/audit-policy.yaml" }
  tags: dis_master_config

- name: "Distribution master systemd unit"
  template:
    src: "{{ item.src }}"
    owner: root
    group: root
    mode: 0644
    dest: "{{ item.dest }}"
  with_items:
    - {src: "kube-apiserver.service.j2",dest: "/usr/lib/systemd/system/kube-apiserver.service" }
    - {src: "kube-controller-manager.service.j2",dest: "/usr/lib/systemd/system/kube-controller-manager.service" }
    - {src: "kube-scheduler.service.j2",dest: "/usr/lib/systemd/system/kube-scheduler.service" }
  tags: dis_master_systemd

- name: "Restart kube-apiserver"
  systemd:
    name: kube-apiserver
    state: restarted
    daemon_reload: yes
    enabled: yes
    masked: false
  tags: restart_apiserver

- name: "Restart kube-controller-manager"
  systemd:
    name: kube-controller-manager
    state: restarted
    daemon_reload: yes
    enabled: yes
    masked: false
  tags: restart_controller

- name: "Restart kube-scheduler"
  systemd:
    name: kube-scheduler
    state: restarted
    daemon_reload: yes
    enabled: yes
    masked: false
  tags: restart_scheduler

- name: "Add kubectl completion"
  lineinfile:
    dest: "/etc/profile"
    line: "source <(kubectl completion bash)"
    state: present

- name: "Waiting kube-apiserver starting"
  wait_for:
    host: "{%- if kubernetes.ipv4_stack and kubernetes.ipv6_stack -%}{{ ansible_default_ipv4.address }}{%- elif kubernetes.ipv4_stack -%}{{ ansible_default_ipv4.address }}{%- else -%}{{ ansible_default_ipv6.address }}{%- endif -%}"
    port: 6443
    delay: 5
    sleep: 2
  tags: healthcheck

- name: "Waiting kube-controller-manager starting"
  wait_for:
    host: "{%- if kubernetes.ipv4_stack and kubernetes.ipv6_stack -%}{{ ansible_default_ipv4.address }}{%- elif kubernetes.ipv4_stack -%}{{ ansible_default_ipv4.address }}{%- else -%}{{ ansible_default_ipv6.address }}{%- endif -%}"
    port: 10257
    delay: 5
    sleep: 2
  tags: healthcheck

- name: "Waiting kube-scheduler starting"
  wait_for:
    host: "{%- if kubernetes.ipv4_stack and kubernetes.ipv6_stack -%}{{ ansible_default_ipv4.address }}{%- elif kubernetes.ipv4_stack -%}{{ ansible_default_ipv4.address }}{%- else -%}{{ ansible_default_ipv6.address }}{%- endif -%}"
    port: 10259
    delay: 5
    sleep: 2
  tags: healthcheck

- name: "Kube-apiserver health check"
  uri:
    url: "https://{%- if kubernetes.ipv4_stack and kubernetes.ipv6_stack -%}{{ ansible_default_ipv4.address }}{%- elif kubernetes.ipv4_stack -%}{{ ansible_default_ipv4.address }}{%- else -%}[{{ ansible_default_ipv6.address }}]{%- endif -%}:6443/healthz"
    return_content: yes
    validate_certs: no
    client_cert: "/etc/kubernetes/pki/admin.pem"
    client_key: "/etc/kubernetes/pki/admin.key"
  register: apiserver
  failed_when: "'ok' not in apiserver.content"
  tags: healthcheck

- name: "Kube-controller-manager health check"
  uri:
    url: "https://{%- if kubernetes.ipv4_stack and kubernetes.ipv6_stack -%}{{ ansible_default_ipv4.address }}{%- elif kubernetes.ipv4_stack -%}{{ ansible_default_ipv4.address }}{%- else -%}[{{ ansible_default_ipv6.address }}]{%- endif -%}:10257/healthz"
    return_content: yes
    validate_certs: no
  register: controller
  failed_when: "'ok' not in controller.content"
  tags: healthcheck

- name: "Kube-scheduler health check"
  uri:
    url: "https://{%- if kubernetes.ipv4_stack and kubernetes.ipv6_stack -%}{{ ansible_default_ipv4.address }}{%- elif kubernetes.ipv4_stack -%}{{ ansible_default_ipv4.address }}{%- else -%}[{{ ansible_default_ipv6.address }}]{%- endif -%}:10259/healthz"
    return_content: yes
    validate_certs: no
  register: scheduler
  failed_when: "'ok' not in scheduler.content"
  tags: healthcheck
